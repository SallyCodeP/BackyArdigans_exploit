# ---------------------------------------------------- #
          # Public modules
# ---------------------------------------------------- #
import socket as ss
from threading import Thread
from time import sleep
from PyQt5.QtWidgets import QApplication, QMessageBox
from PyQt5 import QtWidgets, QtGui, QtCore
import sys

# ---------------------------------------------------- #
                  # My modules
# ---------------------------------------------------- #
from Door_project.Interface.pato import Interface, GetDataInterface
from Door_project.Server import Server as Coliseu


class Connection(Interface):
    def __init__(self):
        super().__init__()

        self.geral = list()

        # Server configs
        self.point = ss.socket(ss.AF_INET, ss.SOCK_STREAM)
        self.point.bind((ss.gethostname(), 53361))
        self.point.listen(5)

        # Server vars
        self.conect = dict()
        self.ip = list()

        # Func get clients
        Thread(target=self.new_connection).start()

        # Func test connection
        Thread(target=self.connection_test).start()

        # Cliente sendo referido no moento
        self.usando = "None"

        # Interface elements
        self.iniar()
        self.slider_button_try.clicked.connect(self.change)
        self.PopUp_command.clicked.connect(self.thread_popup)
        self.shutdown_command.clicked.connect(self.thread_desligar)
        self.keep = False

# ---------------------------------------------------- #
          # Execution Threads from Coliseu
# ---------------------------------------------------- #
    def thread_desligar(self):
        self.click()
        if self.usando != "None":
            Thread(target=Coliseu.desligar, args=[self.usando]).start()
        else:
            self.justpop("Selecione algum cliente!")

    def thread_popup(self):
        self.click()
        if self.usando != "None":
            self.keep = False
            message = self.get_data("message")
            while not self.keep:
                if message != "\nErro\n":
                    Thread(target=Coliseu.popup, args=[self.usando, message]).start()
        else:
            self.justpop("Selecione algum cliente!")

# ---------------------------------------------------- #
                # Window create
# ---------------------------------------------------- #
    @staticmethod
    def justpop(msg):
        pop = QMessageBox()
        pop.setWindowTitle("Erro")
        pop.setText(msg)
        pop.setIcon(QMessageBox.Warning)
        pop.exec_()

    @staticmethod
    def get_data(cheese):
        call.show()
        if cheese == "photo":
            call.put_photo.show()
            call.put_data.close()

        else:
            call.put_photo.close()
            call.put_data.show()

        return call.mss

# ---------------------------------------------------- #
                # Client pick
# ---------------------------------------------------- #
    def click(self):
        it = self.painel.currentItem()
        if not it:
            self.justpop("Selecione algum cliente!")
        else:
            for ele in self.conect.keys():
                if it == self.conect[ele][3]:
                    self.usando = self.conect[ele][0]

# ---------------------------------------------------- #
                # Server Methods
# ---------------------------------------------------- #
    def new_connection(self):
        while True:
            objj, ipp = self.point.accept()
            if not ipp[0] in self.ip:
                while True:
                    name = input("Nome do pc ---> ")
                    if name != "" and name != "None" and not name in self.conect.keys():
                        self.conect[name] = [objj, ipp[0], ipp[1]]
                        self.new_connection_label(name)
                        self.ip.append(ipp[0])
                        break

    def new_connection_label(self, nome):
        self.conect[nome].append(QtWidgets.QListWidgetItem(nome))
        self.conect[nome][3].setTextAlignment(QtCore.Qt.AlignHCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.conect[nome][3].setFont(font)
        self.painel.addItem(self.conect[nome][3])
        self.geral.append(self.conect[nome][3])

    def connection_test(self):
        while True:
            try:
                for abcc, obj in self.conect.items():
                    if obj[0] != self.usado:
                        try:
                            obj[0].send(bytes(1))
                        except ConnectionRefusedError:
                            self.desconection(abcc)
                        except ConnectionAbortedError:
                            self.desconection(abcc)
                        except ss.error:
                            self.desconection(abcc)
                        sleep(8)
            except Exception:
                continue

    def desconection(self, name):
        item_index = self.geral.index(self.conect[name][3])
        self.painel.takeItem(item_index)
        self.painel.removeItemWidget(self.conect[name][3])
        self.geral.remove(self.conect[name][3])
        self.ip.remove(self.conect[name][1])
        del self.conect[name]

        print(f"O cliente {name} foi desconectado!")


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

# Init Program and Interface
if __name__ == "__main__":
    app = QApplication(sys.argv)
    call = GetDataInterface()
    abc = Connection()
    abc.show()
    sys.exit(app.exec_())

