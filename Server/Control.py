# ---------------------------------------------------- #
          # Public modules
# ---------------------------------------------------- #
import socket as ss
from threading import Thread
from time import sleep
from PyQt5.QtWidgets import QApplication, QMessageBox
from PyQt5 import QtWidgets, QtGui, QtCore
import sys

# ---------------------------------------------------- #
                  # My modules
# ---------------------------------------------------- #
from Door_project.Interface.pato import Interface
from Door_project.Interface.get_data_window import GetDataInterface
import Server as Coliseu


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #
              # Main Aplication Class (M.A.C)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #

class MAC(Interface):

# ---------------------------------------------------- #
        # Hosting server and setting configuration
# ---------------------------------------------------- #
    def __init__(self):
        super().__init__()

        self.geral = list()

        # Server configs
        self.point = ss.socket(ss.AF_INET, ss.SOCK_STREAM)
        self.point.bind((ss.gethostname(), 53361))
        self.point.listen(5)

        # Server vars
        self.conect = dict()
        self.ip = list()

        # Func get clients
        Thread(target=self.new_connection).start()

        # Func test connection
        Thread(target=self.connection_test).start()

        # Interface elements
        self.motive = ''
        self.iniar()
        self.slider_button_try.clicked.connect(self.change)
        self.PopUp_command.clicked.connect(self.thread_popup)
        self.shutdown_command.clicked.connect(self.thread_desligar)
        self.change_client_ip.clicked.connect(self.change_client_ipname)
        self.background_command.clicked.connect(self.thread_wallpaper)
        if len(self.ip) == 0:
            self.IP_names.setText("")

        # Cliente sendo referido no moento
        self.usando = "None"
        Thread(target=self.click).start()

# ---------------------------------------------------- #
          # Execution Threads from Coliseu
# ---------------------------------------------------- #

    def thread_wallpaper(self):
        if self.usando != "None":
            photo = QtWidgets.QFileDialog.getOpenFileUrl()[0].url().split("/")
            Thread(target=Coliseu.wallpaper, args=[self.usando[0], photo]).start()
        else:
            self.justpop("Selecione algum cliente!")

    def thread_desligar(self):
        if self.usando != "None":
            Thread(target=Coliseu.desligar, args=[self.usando[0]]).start()
        else:
            self.justpop("Selecione algum cliente!")

    def thread_popup(self):
        if self.usando != "None":
            self.motive = 'popup'
            self.get_data('')
        else:
            self.justpop("Selecione algum cliente!")

# ---------------------------------------------------- #
                # Others Windows Stuff
# ---------------------------------------------------- #

    @staticmethod
    def justpop(msg):
        pop = QMessageBox()
        pop.setWindowTitle("Erro")
        pop.setText(msg)
        pop.setIcon(QMessageBox.Warning)
        pop.exec_()

    def get_data(self, cheese):
        call.show()
        if cheese == "photo":
            call.put_photo.show()
            call.put_data.close()
            call.enviar_button.clicked.connect(self.capture_data)

        else:
            call.put_photo.close()
            call.put_data.show()
            call.enviar_button.clicked.connect(self.return_capture_data)

    def return_capture_data(self):
        information = call.input_info.text()
        if information != "" and not "\n" in information:
            call.close()
            if self.motive == 'popup':
                Coliseu.popup(self.usando[0], information)
        else:
            self.justpop("O dado inserido não é valido")

# ---------------------------------------------------- #
                # Client pick
# ---------------------------------------------------- #

    def click(self):
        while True:
            try:
                it = self.painel.currentItem()
                for ele in self.conect.keys():
                    if it == self.conect[ele][3]:
                        self.usando = [self.conect[ele][0], ele]
                        self.IP_names.setText(f"{ele} ({self.conect[ele][1]})")
            except Exception:
                self.IP_names.setText("")

# ---------------------------------------------------- #
                # Server Methods
# ---------------------------------------------------- #

    def change_client_ipname(self):
        pass

    def new_connection(self):
        while True:
            objj, ipp = self.point.accept()
            if not ipp[0] in self.ip:
                while True:
                    name = f"Default{len(self.conect)}"
                    if name != "" and name != "None" and not name in self.conect.keys():
                        self.conect[name] = [objj, ipp[0], ipp[1]]
                        self.new_connection_label(name)
                        self.ip.append(ipp[0])
                        self.IP_names.setText(f"{name} ({ipp[0]})")
                        break

    def new_connection_label(self, nome):
        self.conect[nome].append(QtWidgets.QListWidgetItem(nome))
        self.conect[nome][3].setTextAlignment(QtCore.Qt.AlignHCenter)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.conect[nome][3].setFont(font)
        self.painel.addItem(self.conect[nome][3])
        self.geral.append(self.conect[nome][3])

    def connection_test(self):
        while True:
            try:
                for abcc, obj in self.conect.items():
                    try:
                        obj[0].send(bytes(1))
                    except ConnectionRefusedError:
                        Thread(target=self.desconection, args=(abcc, )).start()
                    except ConnectionAbortedError:
                        Thread(target=self.desconection, args=(abcc, )).start()
                    except ss.error:
                        Thread(target=self.desconection, args=(abcc, )).start()
                    sleep(8)
            except Exception:
                continue

    def desconection(self, name):
        item_index = self.geral.index(self.conect[name][3])
        self.painel.takeItem(item_index)
        self.painel.removeItemWidget(self.conect[name][3])
        self.geral.remove(self.conect[name][3])
        self.ip.remove(self.conect[name][1])
        del self.conect[name]
        self.justpop(f'Cliente {name} desconectado!')


# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #
                        # Class End
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #


# ---------------------------------------------------- #
            # Init Program and Interface
# ---------------------------------------------------- #

if __name__ == "__main__":
    app = QApplication(sys.argv)
    abc = MAC()
    call = GetDataInterface()
    abc.show()
    sys.exit(app.exec_())
